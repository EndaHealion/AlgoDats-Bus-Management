
import java.util.HashMap;

public class BusStopSearch {

	class TrieNode {

		public boolean containsKey(char ch) {
			return links[ch - 'a'] != null;
		}

		public TrieNode get(char ch) {
			return links[ch - 'a'];
		}

		public void put(char ch, TrieNode node) {
			links[ch - 'a'] = node;
		}

		public void setEnd() {
			isEnd = true;
		}

		public boolean isEnd() {
			return isEnd;
		}
	}

	public class TrieNode {
		public HashMap<Character, TrieNode> children;
		public String value;
		public boolean isEnd;

		TrieNode() {
			children = new HashMap<Character, TrieNode>();
			value = "";
			isEnd = false;
		}

		void addChild(char c, ) {

		}

		TrieEnode() {
	    	
	    }
	}

	public class Trie {

		public final int RADIX = 26;

		public TrieNode root;

		public void insert(String word) {
			TrieNode current = root;

			for (char l : word.toCharArray()) {
				current = current.children.computeIfAbsent(l, c -> new TrieNode());
			}
			current.setEndOfWord(true);
		}

	}

}
