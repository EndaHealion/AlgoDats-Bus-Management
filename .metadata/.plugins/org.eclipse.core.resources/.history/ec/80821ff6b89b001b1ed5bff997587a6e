
import java.util.HashMap;

public class BusStopSearch {

	public class TrieNode {
		public HashMap<Character, TrieNode> children;
		public String value;
		public boolean isEnd;

		public boolean containsKey(char c) {
			return children.containsKey((Character) c);
		}

		void add(char c, TrieNode node) {
			children.put((Character) c, node);
		}

		TrieNode get(char c) {
			return children.get((Character) c);
		}

		TrieNode() {
			children = new HashMap<Character, TrieNode>();
			value = "";
			isEnd = false;
		}
	}

	public class Trie {
		public TrieNode root = null;

		Trie(String fileLocation) {
			// init Tree
			// for every word in file
			//   insert(word);
		}
		
		public void insert(String word) {
			if (root == null) {
				return;
			}

			TrieNode node = root;
			for (int i = 0; i < word.length(); i++) {
				char currentChar = word.charAt(i);
				if (!node.children.containsKey((Character) currentChar)) {
					node.add((Character) currentChar, new TrieNode());
				}
				node = node.children.get((Character) currentChar);
			}
			node.isEnd = true;
		}

		public TrieNode searchPrefix(String word) {
			if (root == null) {
				return null;
			}

			TrieNode node = root;
			for (int i = 0; i < word.length(); i++) {
				char currentChar = word.charAt(i);
				if (node.children.containsKey(currentChar)) {
					node = node.get(currentChar);
				} else {
					return null;
				}
			}
			return node;
		}

		public boolean isInTree(String word) {
			TrieNode node = searchPrefix(word);
			return (node != null && node.isEnd);
		}
		
		public boolean startsWith(String prefix) {
	        TrieNode node = searchPrefix(prefix);
	        return node != null;
	    }
	}

}
